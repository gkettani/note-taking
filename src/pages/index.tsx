import { type NextPage } from "next";
import Head from "next/head";
import { useRef, useState, useCallback } from "react";
import debounce from "lodash.debounce";

import { trpc } from "../utils/trpc";
import type { RouterOutputs } from "../utils/trpc";
import TextEditor from "../components/editor/TextEditor";

type Note = RouterOutputs["notes"]["getAll"][number] | undefined;

const Home: NextPage = () => {

  const [currentNote, setCurrentNote] = useState<Note>(undefined);

  const notes = trpc.notes.getAll.useQuery();

  const contentRef = useRef<HTMLTextAreaElement>(null);

  const create = trpc.notes.create.useMutation({
    onSuccess: () => {
      notes.refetch();
    }
  }
  );

  const updateNote = trpc.notes.update.useMutation({
    onSuccess: () => {
      notes.refetch();
    }
  });

  const deleteNote = trpc.notes.delete.useMutation({
    onSuccess: () => {
      notes.refetch();
    }
  });

  const debounceApiCall = useCallback( 
    debounce((noteId: string, title: string, content: string) => {
      updateNote.mutate({ id: noteId, title, content });
    }, 1000), []);

  const updateEditor = (noteId: string) => {
    const note = notes.data?.find((note) => note.id === noteId);
    setCurrentNote(note);
  }

  const handleDelete = (id: string) => {
    deleteNote.mutate({ id });
    setCurrentNote(undefined);
  }

  return (
    <>
      <Head>
        <title>Notes</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-full p-3 font-mono">
        <div className="side-bar w-1/5">
          <h1 className="text-2xl text-slate-800 font-bold">Notes</h1>
          <button onClick={() => create.mutate({ title: "Untitled", content: "" })}>Create</button>
          <ul>
            {notes.data?.map((note) => (
              <li key={note.id} className="text-blue-900 underline hover:cursor-pointer" onClick={() => updateEditor(note.id)}>{note.title || "Untitled"}</li>
              ))}
          </ul>
        </div>
        <TextEditor debounceApiCall={debounceApiCall} note={currentNote} deleteNote={handleDelete} />
      </main>
    </>
  );
};

export default Home;
